//
// Generated by LLVM NVPTX Back-End
//

/*
 * 2 questions
 1. if there are more than 128 threads per block, the threads have the same
    (tid.x % 128) in the same block will handle the same range of values?
 2. if the total number of elements is not a multiple of 4, will there be
    out of range access? Tried in the driver, the result is still correct.
    But maybe the issue is hidden if cuda over-allocate some memory at the
    end of each buffer?
 */

.version 7.4
.target sm_86
.address_size 64

        // .globl       add_kernel__Pfp32_Pfp32_Pfp32_i32__4c1024

// .visible .entry add_kernel__Pfp32_Pfp32_Pfp32_i32__4c1024(
.visible .entry add(
        .param .u64 add_kernel__Pfp32_Pfp32_Pfp32_i32__4c1024_param_0,
        .param .u64 add_kernel__Pfp32_Pfp32_Pfp32_i32__4c1024_param_1,
        .param .u64 add_kernel__Pfp32_Pfp32_Pfp32_i32__4c1024_param_2,
        .param .u32 add_kernel__Pfp32_Pfp32_Pfp32_i32__4c1024_param_3
)
// .maxntid 128, 1, 1  // this directive generated by trition will fail the driver since the driver create 256 threads per block
.maxntid 256
{
        .reg .pred      %p<7>;
        .reg .f32       %f<25>;
        .reg .b32       %r<33>;
        .reg .b64       %rd<13>;

        ld.param.u64    %rd9, [add_kernel__Pfp32_Pfp32_Pfp32_i32__4c1024_param_0];
        ld.param.u64    %rd10, [add_kernel__Pfp32_Pfp32_Pfp32_i32__4c1024_param_1];
        ld.param.u64    %rd11, [add_kernel__Pfp32_Pfp32_Pfp32_i32__4c1024_param_2];
        ld.param.u32    %r25, [add_kernel__Pfp32_Pfp32_Pfp32_i32__4c1024_param_3];

        mov.u32         %r26, %tid.x; 

        and.b32         %r27, %r26, 127;
        shl.b32         %r28, %r27, 2;

        mov.u32         %r29, %ctaid.x;

        shl.b32         %r30, %r29, 10;
        or.b32          %r31, %r30, %r28;
        or.b32          %r32, %r31, 512;
        setp.lt.s32     %p1, %r31, %r25;
        setp.lt.s32     %p2, %r32, %r25;

        mul.wide.s32    %rd12, %r31, 4;
        add.s64         %rd3, %rd9, %rd12;
        @%p1 ld.global.v4.b32 {%r1,%r2,%r3,%r4}, [ %rd3 + 0];
        mov.b32         %f1, %r1;
        mov.b32         %f2, %r2;
        mov.b32         %f3, %r3;
        mov.b32         %f4, %r4;
        @%p2 ld.global.v4.b32 {%r5,%r6,%r7,%r8}, [ %rd3 + 2048];
        mov.b32         %f5, %r5;
        mov.b32         %f6, %r6;
        mov.b32         %f7, %r7;
        mov.b32         %f8, %r8;
        add.s64         %rd5, %rd10, %rd12;
        @%p1 ld.global.v4.b32 {%r9,%r10,%r11,%r12}, [ %rd5 + 0];
        mov.b32         %f9, %r9;
        mov.b32         %f10, %r10;
        mov.b32         %f11, %r11;
        mov.b32         %f12, %r12;
        @%p2 ld.global.v4.b32 {%r13,%r14,%r15,%r16}, [ %rd5 + 2048];
        mov.b32         %f13, %r13;
        mov.b32         %f14, %r14;
        mov.b32         %f15, %r15;
        mov.b32         %f16, %r16;
        add.f32         %f17, %f1, %f9;
        add.f32         %f18, %f2, %f10;
        add.f32         %f19, %f3, %f11;
        add.f32         %f20, %f4, %f12;
        add.f32         %f21, %f5, %f13;
        add.f32         %f22, %f6, %f14;
        add.f32         %f23, %f7, %f15;
        add.f32         %f24, %f8, %f16;
        add.s64         %rd7, %rd11, %rd12;
        mov.b32         %r17, %f17;
        mov.b32         %r18, %f18;
        mov.b32         %r19, %f19;
        mov.b32         %r20, %f20;
        @%p1 st.global.v4.b32 [ %rd7 + 0] , {%r17,%r18,%r19,%r20};
        mov.b32         %r21, %f21;
        mov.b32         %r22, %f22;
        mov.b32         %r23, %f23;
        mov.b32         %r24, %f24;
        @%p2 st.global.v4.b32 [ %rd7 + 2048] , {%r21,%r22,%r23,%r24};
        ret;
}
